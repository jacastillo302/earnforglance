// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	customers "earnforglance/server/domain/customers"
	mock "github.com/stretchr/testify/mock"
)

// LoginRepository is an autogenerated mock type for the LoginRepository type
type LoginRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, user
func (_m *LoginRepository) Create(c context.Context, user *customers.Customer) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *customers.Customer) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: c
func (_m *LoginRepository) Fetch(c context.Context) ([]customers.Customer, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []customers.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]customers.Customer, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []customers.Customer); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]customers.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: c, email
func (_m *LoginRepository) GetByEmail(c context.Context, email string) (customers.Customer, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 customers.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (customers.Customer, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) customers.Customer); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(customers.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *LoginRepository) GetByID(c context.Context, id string) (customers.Customer, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 customers.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (customers.Customer, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) customers.Customer); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(customers.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoginRepository creates a new instance of LoginRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginRepository {
	mock := &LoginRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
