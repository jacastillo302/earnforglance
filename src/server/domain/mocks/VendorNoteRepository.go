// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "earnforglance/server/domain/vendors"

	mock "github.com/stretchr/testify/mock"
)

// VendorNoteRepository is an autogenerated mock type for the VendorNoteRepository type
type VendorNoteRepository struct {
	mock.Mock
}

func (_m *VendorNoteRepository) CreateMany(c context.Context, acl_record []domain.VendorNote) error {
	ret := _m.Called(c, acl_record)
	if len(ret) == 0 {
		panic("no return value specified for Create")
	}
	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.VendorNote) error); ok {
		r0 = rf(c, acl_record)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Create provides a mock function with given fields: c, vendor_note
func (_m *VendorNoteRepository) Create(c context.Context, vendor_note *domain.VendorNote) error {
	ret := _m.Called(c, vendor_note)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.VendorNote) error); ok {
		r0 = rf(c, vendor_note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, ID
func (_m *VendorNoteRepository) Delete(c context.Context, ID string) error {
	ret := _m.Called(c, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: c
func (_m *VendorNoteRepository) Fetch(c context.Context) ([]domain.VendorNote, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []domain.VendorNote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.VendorNote, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.VendorNote); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.VendorNote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByID provides a mock function with given fields: c, ID
func (_m *VendorNoteRepository) FetchByID(c context.Context, ID string) (domain.VendorNote, error) {
	ret := _m.Called(c, ID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByID")
	}

	var r0 domain.VendorNote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.VendorNote, error)); ok {
		return rf(c, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.VendorNote); ok {
		r0 = rf(c, ID)
	} else {
		r0 = ret.Get(0).(domain.VendorNote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, vendor_note
func (_m *VendorNoteRepository) Update(c context.Context, vendor_note *domain.VendorNote) error {
	ret := _m.Called(c, vendor_note)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.VendorNote) error); ok {
		r0 = rf(c, vendor_note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVendorNoteRepository creates a new instance of VendorNoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVendorNoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VendorNoteRepository {
	mock := &VendorNoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
